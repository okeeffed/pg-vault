name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            arch: intel
          - target: aarch64-apple-darwin
            arch: apple-silicon

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Import Code-Signing Certificates
      uses: Apple-Actions/import-codesign-certs@v2
      with:
        p12-file-base64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
        p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

    - name: Sign binary
      run: |
        binary_name="pg-vault"
        binary_path="target/${{ matrix.target }}/release/$binary_name"
        
        # Sign the binary
        codesign --sign "${{ secrets.APPLE_SIGNING_IDENTITY }}" \
          --options runtime \
          --verbose \
          --force \
          "$binary_path"
        
        # Verify signing
        codesign --verify --verbose "$binary_path"

    - name: Create archive
      run: |
        binary_name="pg-vault"
        archive_name="pg-vault-macos-${{ matrix.arch }}.zip"
        cp "target/${{ matrix.target }}/release/$binary_name" .
        zip "$archive_name" "$binary_name"
        echo "ARCHIVE_NAME=$archive_name" >> $GITHUB_ENV

    - name: Notarize archive
      run: |
        # Submit for notarization
        xcrun notarytool submit "${{ env.ARCHIVE_NAME }}" \
          --apple-id "${{ secrets.APPLE_ID }}" \
          --password "${{ secrets.APPLE_ID_PASSWORD }}" \
          --team-id "${{ secrets.APPLE_TEAM_ID }}" \
          --wait

        # Extract binary from archive for stapling
        unzip "${{ env.ARCHIVE_NAME }}"
        
        # Staple the notarization to the binary
        xcrun stapler staple "pg-vault"
        
        # Recreate archive with stapled binary
        rm "${{ env.ARCHIVE_NAME }}"
        zip "${{ env.ARCHIVE_NAME }}" "pg-vault"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: pg-vault-macos-${{ matrix.arch }}
        path: ${{ env.ARCHIVE_NAME }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}